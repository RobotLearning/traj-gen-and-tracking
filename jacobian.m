% Computes the geometric jacobian
% used to show racket velocities in cartesian space
%
% Function taken from SL: 
% shared/barrett/include/SL_kinematics_body.h
%
% Called from the kinematics method of Barrett WAM class
%
function Jac = jacobian(xLink,xOrigin,xAxis)

NDOF = size(xOrigin,1);
NCART = 3;
% system states are X   =   (x(1),x(2),x(3))
 
% the Jlist variable generated by the math files contains the 
% the indicators which joints contribute to each endeffector of
% the jacobian. Now, this information is used to compute the
% geometric jacobian 

% NOTE: Assuming in MATLAB that Jlist is all ones
%Jlist = ones(1,NDOF);

for i = 1:NDOF
    %if Jlist(i) ~= 0
    % compute c here
    Jac(:,i) = revoluteGJacColumn(xLink(end,:),xOrigin(i,:),xAxis(i,:));
    %end
end

end

% 
%  revoluteGJacColumn
%  January 2006
% 
%  computes one column for the geometric jacobian of a revolute joint
%  from the given input vectors
% 
%  *******************************************************************************
%  INPUTS:
% 
%       p    : position of endeffector
%       pi   : position of joint origin
%       zi   : unit vector of joint axis
%
%  OUTPUTS:
%
%       c    : column vector of Jacobian
%
function c = revoluteGJacColumn(p, pi, zi)

  c(1) = zi(2) * (p(3)-pi(3)) - zi(3) * (p(2)-pi(2));
  c(2) = zi(3) * (p(1)-pi(1)) - zi(1) * (p(3)-pi(3));
  c(3) = zi(1) * (p(2)-pi(2)) - zi(2) * (p(1)-pi(1));
  c(4) = zi(1);
  c(5) = zi(2);
  c(6) = zi(3);
end
