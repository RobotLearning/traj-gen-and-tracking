function [robot, some_postures] = mdl_bioRob()
%
% Create an object for the bioRob using Peter Corke's toolbox.
%
% Apart from the masses and link lenghts the values of the robot here are
% completely random, so it does not, in fact, represent the real dynamics of
% the bioRob. As we approach the real experiment we should find the proper
% parameters of the robot. But for the moment I would leave the numbers like this.
%
% 12.05.2015 Guilherme.


clear L
deg = pi/180;
linkLength  =   [0         .307    .310   .09;];
gearRatio   = 1*[1000      100     100    100];
linkMass    =   [1.5       1.35   .53    .35 ]; %original biorob
linkMass    =   [1.5       1.35   .53    .35 ];
linkInertia =  1/12*linkMass.*(linkLength).^2; % rod model


% this link has zero length and lots of friction.
% it is not being controlled at the moment.
% This makes the arm to reach a task on a fixed XZ plane.
L(1) = Revolute('d', 0.0, 'a', linkLength(1), 'alpha', pi/2, ...
    'I',    [0, 0, 0.5*linkInertia(1), 0, 0, 0], ...
    'r',    [0, 0, 0], ...
    'm',    linkMass(1), ...
    'Jm',   200e-6, ...          % motor inertia
    'G',    gearRatio(1), ...    % gear ratio
    'B',    1.48e-3, ...         % viscous friction 
    'Tc',   [0.395 -0.435], ...  % Coulomb friction
    'qlim', [-160 160]*deg );


L(end+1) = Revolute('d', 0, 'a', linkLength(2), 'alpha', 0, ...
    'I',    [0, 0, linkInertia(2), 0, 0, 0], ...
    'r',    [0.307/2, 0, 0], ...
    'm',    linkMass(2), ...
    'Jm',   200e-6, ...
    'G',    gearRatio(2), ...
    'B',    0.817e-3, ...
    'Tc',   [0.126 -0.071], ...
    'qlim', [-360 360]*deg );

L(end+1) = Revolute('d',0, 'a',  linkLength(3), 'alpha',0,  ...
    'I',    [0, 0, linkInertia(3), 0, 0, 0], ...
    'r',    [0.31/2, 0, 0], ...
    'm',    linkMass(3), ...
    'Jm',   200e-6, ...
    'G',    gearRatio(3), ...
    'B',    1.38e-3, ...
    'Tc',   [0.132, -0.105], ...
    'qlim', [-360 360]*deg );

L(end+1) = Revolute('d', 0, 'a',linkLength(4), 'alpha', 0,  ...
    'I',    [0, 0, linkInertia(4), 0, 0, 0], ...
    'r',    [0.09/2, 0, 0], ...
    'm',    linkMass(4), ...
    'Jm',   200e-6, ...
    'G',    gearRatio(4), ...
    'B',    1.2e-3, ...
    'Tc',   [11.2e-3, -16.9e-3], ...
    'qlim', [-360 360]*deg );


robot = SerialLink(L, 'name', 'bioRob', ...
    'manufacturer', 'Unimation', 'comment', 'viscous friction; params of 8/95');

% some useful poses
%
some_postures.qany   = [0     -100    -10  +45]*deg;
some_postures.qz     = [0      0      0   0]*deg; % zero angles, L shaped pose
some_postures.qtop   = [0      pi/2   0   0]; % ready pose, arm up
some_postures.qdown  = [0     -pi/2   0   0   0 ];



clear L










